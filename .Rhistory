?person
about()
?limSolve
library(limSolve)
?limsolve
?limSolve
require(pracma)
?pracma
source('~/Documents/Source/FishSizeSpectrum/R/community.R')
setwd("~/Documents/Source/FishSizeSpectrum")
source('~/Documents/Source/FishSizeSpectrum/R/community.R')
source('~/Documents/Source/FishSizeSpectrum/R/community.R')
baserun()
?melt
library(reshape)
?melt
source('~/Documents/Source/FishSizeSpectrum/R/community.R')
baserun()
s=baserun()
R CMD check --help
CMD check --help
check --help
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?library
devtools::check()
devtools::check()
devtools::build()
demo()
?demo
demo(package="fishsizespectrum")
library("fishsizespectrum")
demo(package="fishsizespectrum")
devtools::build()
?devtools
devtools::install()
demo(package="fishsizespectrum")
?demo
demo(SingleStockCalculator)
demo(SingleStockCalculator)
devtools::install()
demo(SingleStockCalculator)
devtools::install()
devtools::test()
devtools::test()
devtools::check()
devtools::check()
devtools::check()
devtools::install()
?force
force(default)
runApp('R/SingleStockCalculator.R')
devtools::install()
devtools::install()
devtools::install()
devtools::install()
SingleStockCalculator()
runApp('R/SingleStockCalculator.R')
runApp('R/SingleStockCalculator.R')
setwd("~/Documents/Source/FishSizeSpectrum")
runApp('R/SingleStockCalculator.R')
devtools::install()
runApp('R/SingleStockCalculator.R')
devtools::install()
runApp('R/SingleStockCalculator.R')
setwd("~/Documents/Source/FishSizeSpectrum")
runApp('R/SingleStockCalculator.R')
devtools::install()
SingleStockCalculator()
runExample()
devtools::install()
runExample()
system.file(package = "FishSizeSpectrum")
system.file("",package = "FishSizeSpectrum")
system.file("inst",package = "FishSizeSpectrum")
man system.file
?system.file
system.file(package="ggplot")
system.file(package="ggplots")
system.file(package="base")
library("FishSizeSpectrum")
library("fishsizespectrum")
system.file(package="fishsizespectrum")
devtools::install()
runExample()
devtools::install()
SingleStockCalculator()
devtools::install()
SingleStockCalculator()
?promptPackage
promptPackage("fishsizespectrum")
?fishsizespectrum
devtools::install()
?fishsizespectrum
?fishsizespectrum
devtools::install()
?fishsizespectrum
?fishsizespectrum
source('~/Documents/Source/FishSizeSpectrum/R/Examples.R')
SingleStockAssessment()
source('~/Documents/Source/FishSizeSpectrum/R/Examples.R')
source('~/Documents/Source/FishSizeSpectrum/R/Examples.R')
SingleStockAssessment()
p=baseparameters(W=10000)
p$F=0.3
# Calculate reference points:
ref = calcRefpoints(p)
p$F=0
# Calculate reference SSB:
SSB0 = calcSSB(p)
source('~/Documents/Source/FishSizeSpectrum/R/basefunctions.R')
# Calculate reference SSB:
SSB0 = calcSSB(p)
p$F=0
# Calculate reference spectrum:
N0 = spectrum(p)
# Set fishing mortality:
p$F = F
# Calc fished spectrum:
N = spectrum(p)
# Calculate reference points:
ref = calcRefpoints(p)
ref
source('~/Documents/Source/FishSizeSpectrum/R/Examples.R')
SingleStockAssessment()
N
names(N)
source('~/Documents/Source/FishSizeSpectrum/R/Examples.R')
SingleStockAssessment()
S = calcSelectionResponse(param, W, F)
W = 10000
S = calcSelectionResponse(param, W, F)
param=baseparameters(W)
S = calcSelectionResponse(param, W, F)
# Add the QG parameters to the param structure
paramQG = baseparamQG(wm = p$etaM*W, param)
# Add the QG parameters to the param structure
paramQG = baseparamQG(p=param)
# Add the QG parameters to the param structure
paramQG = baseparamQG(p=param)
S = calcSelectionResponse(paramQG, W, F)
S
F
F=0.3
S = calcSelectionResponse(paramQG, W, F)
S
source('~/Documents/Source/FishSizeSpectrum/R/Examples.R')
SingleStockAssessment()
devtools::install()
?fishsizespectrum
?base
?fishsizespectrum
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install()
?fishsizespectrum
devtools::install()
?fishsizespectrum
devtools::check()
devtools::check()
devtools::install()
?fishsizespectrum
devtools::install()
?fishsizespectrum
devtools::check()
devtools::check()
devtools::install()
?fishsizespectrum
library(fishsizespectrum)
?fishsizespectrum
devtools::install()
library(fishsizespectrum)
?fishsizespectrum
install.packages(c("ape", "backports", "BH", "bold", "caTools", "checkpoint", "class", "cli", "cluster", "codetools", "commonmark", "cowplot", "crul", "curl", "data.table", "deSolve", "devtools", "digest", "doParallel", "dotCall64", "dplyr", "evaluate", "fields", "fitdistrplus", "foreign", "gam", "ggplot2", "git2r", "glue", "grImport", "hexbin", "httpuv", "httr", "iterators", "jsonlite", "knitr", "later", "lattice", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "mgcv", "mime", "openssl", "packrat", "pillar", "pkgconfig", "pracma", "R6", "raster", "RCurl", "reshape", "rfishbase", "rgdal", "ritis", "RJSONIO", "rlang", "rmarkdown", "rncl", "rotl", "roxygen2", "rphylopic", "rredlist", "rsconnect", "rstudioapi", "scales", "shiny", "solrium", "spam", "stringi", "survival", "taxize", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "urltools", "wikitaxa", "worrms", "XML", "xml2", "xtable", "yaml", "zoo"))
?fishsizespectrum
library(fishsizespectrum)
?fishsizespectrum
devel::install()
dev::install()
library(devtools)
devel::install()
devtools::install()
?fishsizespectrum
devtools::install()
?fishsizespectrum
library(fishsizespectrum)
?fishsizespectrum
?devtools
devtools::build()
devtools::install()
?fishsizespectrum
library(fishsizespectrum)
?fishsizespectrum
